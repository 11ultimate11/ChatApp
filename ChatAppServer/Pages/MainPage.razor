@page "/mainpage"
@inject IJSRuntime JS;
@inject IApiProcessor _api;
@using ChatAppServer.Models;
@using ChatAppServer.Services;
@using GhostLibrary.Models;
@using GhostLibrary.Services.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json;
@using System.Diagnostics;
@using System.Text.Json.Nodes;
@using ChatAppServer.Controller;
@using static ChatAppServer.Services.Enums;

<CustomNavbar></CustomNavbar>

<Sidebar On_tab_change="HandleTabChange"></Sidebar>
<SidebarSecondary @ref="sidebar" Models="@models" InovkeOnMainPage="@HandleOnChatPick"></SidebarSecondary>


@if(mainpageState == MainpageState.Chats)
{
    <ChatView @ref="_chatView" SelectedChat="@_selectedChat"></ChatView>
}


@code {
    private HubConnection? hubConnection;
    private HubConnectionState hubConnectionState => hubConnection is null ? HubConnectionState.Disconnected : hubConnection.State;
    private string _url = "https://webserver20220507162956.azurewebsites.net/fwapphub";
    private string? _token;
    private string? _imgSrc;
    private bool firstDwl;
    private PersonModel? model;
    private ChatModel _selectedChat;
    private List<ChatModel>? models = new();
    private ChatView? _chatView;
    private SidebarSecondary? sidebar;
    private MainpageState mainpageState = MainpageState.profile;
    private int _personID;


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstDwl) return;
        firstDwl = true;
        _token = await TokenIO.ReadToken("token", JS);
        if (!string.IsNullOrEmpty(_token))
        {
            var json = await _api.GetStringAsync($"Account/LogInWithToken/{_token}", _token);
            if (!string.IsNullOrEmpty(json))
            {
                var node = JsonObject.Parse(json);
                var person = JsonConvert.DeserializeObject<PersonModel>(node["person"].ToString());
                if (person is not null)
                {
                    model = person;
                    _personID = model.ID;
                    await RegisterToBroadcast();
                    _imgSrc = @"data:image/jpeg;base64,"+ Convert.ToBase64String(person.Media.Data);
                    await JS.InvokeVoidAsync("SetUserData", new string[] { _imgSrc!, $"{person.Nachname} {person.Vorname}" });

                    Debug.WriteLine($"Person {person.Vorname}");
                    await GetChats();
                    await InvokeAsync(() => StateHasChanged());
                }
            }
            Debug.WriteLine(json);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await InitHubConnection();
    }
    private async Task GetChats()
    {
        var result = await _api.GetStringAsync("Chat/Getchats/0", _token!);
        if (!string.IsNullOrEmpty(result))
        {
            var chats = JsonConvert.DeserializeObject<List<ChatModel>>(result);
            if (chats is not null && chats.Any())
            {
                models.Add(chats.FirstOrDefault());
                //sidebar?.AddToList(chats);
            }
        }
    }
    private async void HandleTabChange(MainpageState state)
    {
        mainpageState = state;
        await InvokeAsync(() => StateHasChanged());
    }
    private async Task HandleOnChatPick(ChatModel model)
    {
        if(mainpageState != MainpageState.Chats)
        {
            mainpageState = MainpageState.Chats;
            await InvokeAsync(() => StateHasChanged());
        }
        _chatView?.ChangeSelectedChat(model);
    }
    private async Task InitHubConnection()
    {
        if (hubConnection is null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(_url).Build();
            await hubConnection.StartAsync();
            Debug.WriteLine($"Hubconnectionstate {hubConnection.State}");
            hubConnection.On<string>("Broadcast", json =>
            {
                var model = JsonConvert.DeserializeObject<ChatMessageModel>(json);

            });

        }
    }
    public async Task RegisterToBroadcast()
    {
        return;
        while (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
        {
            await Task.Delay(10);
        }
        await hubConnection.InvokeAsync("Register", $"Person{_personID}");
        //App.Instance.DisplayToast("Registered to broadcast");
    }
}
