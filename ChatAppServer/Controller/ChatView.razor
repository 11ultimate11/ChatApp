@using ChatAppServer.Models;
@using ChatAppServer.Services;
@using GhostLibrary.Models;
@using System.Diagnostics;
@using GhostLibrary.Services.Interfaces;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JS;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IApiProcessor _api;









<div class="chat-main-container">
    <div class="container-header">
        <img class="container-header-avatar" src="@_imgUrl" />
        <p class="container-header-label" style="margin-top:10px; margin-left:5px;">@Person?.Nachname @Person?.Vorname</p>
    </div>
    <div class="chat-container">

        @foreach (var item in _models.Reverse<ChatMessageModel>())
        {
            if (item.PersonID == _personID)
            {
                <ChatAppServer.Controller.Chat.ChatElementRight Message="item"></ChatAppServer.Controller.Chat.ChatElementRight>
            }
            else
            {
                <ChatAppServer.Controller.Chat.ChatElementLeft Message="item"></ChatAppServer.Controller.Chat.ChatElementLeft>
            }
        }
    </div>
    <div class="chat-controllers">
        <input class="chat-input" @bind="@_input" />
        <button class="chat-btn" onclick="@Add_new">Send</button>
    </div>
</div>







@code {
    [Parameter]
    public HubConnection? HubConnection { get; set; }
    private string? _input;
    private string? _token;
    private int _personID;
    private List<ChatMessageModel> _models { get; set; } = new();
    private string _imgUrl => GetImgUrl();
    [Parameter]
    public ChatModel? SelectedChat { get; set; }
    [Parameter]
    public PersonModel? Person { get; set; }
    public void AddNewMsj(ChatMessageModel model)
    {
        _models.Add(model);
        StateHasChanged();
    }
    private async Task Add_new()
    {
        if (string.IsNullOrEmpty(_input)) return;
        ChatMessageModel model = new ChatMessageModel
            {
                PersonID = _personID,
                Content = _input,
                CreatedDate = DateTime.Now,
                ReferenceID = SelectedChat.ID
            };
        _input = string.Empty;
        var result = await _api.PostAsync(model, "Chat/AddChatMsj", _token!);
        if (result)
        {
            _models.Add(model);
            try
            {
                HubConnection?.InvokeAsync("BroadcastMessage", JsonConvert.SerializeObject(model), $"Person{_personID}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
            
        }
    }
    private string GetImgUrl()
    {
        if (Person?.Media is null)
        {
            return "./Images/chatt-app-logo.png";
        }
        else
        {
            return Helper.GetImgFromBytes(Person?.Media?.Data);
        }
    }
    public async void ChangeSelectedChat(ChatModel model)
    {
        if (model is null) return;
        SelectedChat = model;
        if (string.IsNullOrEmpty(_token))
        {

            _token = await TokenIO.ReadToken("token", JS);
        }
        var idCoockie = await TokenIO.ReadToken("personID", JS);
        var id = int.Parse(idCoockie);
        _personID = id;
        var fremdID = model.OwnerID == id ? model.TargetID : model.OwnerID;
        List<Task> tasks = new()
        {
            Task.Run(DownloadMessages),
            Task.Run(async()=>  Person = await Helper.DownloadPerson(fremdID , _api, _token))
        };
        await Task.WhenAll(tasks);
        if(Person is not null)
        {
            await InvokeAsync(() => StateHasChanged());
        }
    }
    private async Task DownloadMessages()
    {
        var result = await _api.GetStringAsync($"Chat/GetMessages/{SelectedChat?.ID}/{_models.Count}" , _token!);
        if (!string.IsNullOrEmpty(result))
        {
            var msjs = JsonConvert.DeserializeObject<List<ChatMessageModel>>(result);
            if(msjs is not null)
            {
                _models.AddRange(msjs.Reverse<ChatMessageModel>());
            }
        }
    }

    
}
