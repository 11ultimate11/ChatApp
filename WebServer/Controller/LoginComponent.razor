@using WebServer.Services;
@using GhostLibrary.Services.Interfaces;
@using System.Diagnostics;
@using System.Text.Json.Nodes;
@using Newtonsoft.Json;
@inject IApiProcessor _api;
@inject IJSRuntime JS;


<div class="mainpage-login-popup-container">
    <div class="mainpage-login-popup">
        <button class="mainpage-login-popup-close-btn" @onclick="CancelClick">&#9747;</button>
        <img src="./Images/sun.jpg"/>
        <h1>Einloggen</h1>
        <div class="mainpage-login-item">
            <EditForm Model="Model" OnValidSubmit="OnValidForm">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="mainpage-login-item">
                    <input id="user" @bind-value="Model.Username" placeholder="Benutzername eingeben"/>
                </div>
                <div class="mainpage-login-item">
                    <input id="pass" @bind-value="Model.Password" placeholder="Kennwort eingeben" />
                </div>
                <button type="submit" class="btn-login" style="margin-top:10px;">Login</button>
            </EditForm>
        </div>
        
    </div>
</div>




@code {
    [Parameter]
    public EventCallback<PersonModel> OnLoginCallback { get; set; }
    public CredentialsModel Model { get; set; } = new();
    private async Task CancelClick()
    {
        await OnLoginCallback.InvokeAsync(null);
    }
    private async Task OnValidForm()
    {
        var result = await _api.LogInAsync(Model, "Account/LogIn", string.Empty);
        if(string.IsNullOrEmpty(result))
        {
            await OnLoginCallback.InvokeAsync(null);
            return;
        }
        var node = JsonObject.Parse(result);
        var person = JsonConvert.DeserializeObject<PersonModel>(node["person"].ToString());
        await TokenIO.SaveToken("token", node["token"].ToString(), JS);
        await TokenIO.SaveToken("personID", person.ID.ToString(), JS);
        await OnLoginCallback.InvokeAsync(person);
    }
}

